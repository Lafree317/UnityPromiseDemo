import "UnityEngine"
local Promise = require("LuaPromise")
-- main方法,入口函数
function main()

end


-- 如果不用promise可能要在每个函数执行完就判断一下返回值.
-- 并且还要写在一个函数内
function LuaPromise()
    StepOne("StepOne"):next(function(value)
        return StepTwo(value)
    end):next(function(value)
       return StepThree(value)
    end):next(function(value)
        print(value)
    end,function(err)
        print(err) 
    end)
end

function LuaPromiseAll()
    Promise.all({
        StepOne("StepOne"),
        StepTwo("StepTwo"),
        StepThree("StepThree"),
    }):next(function(results)
        print(results,#results)
    end,function(error)
        print(error)
    end)
end

function LuaPromiseCrash()
    StepOne("StepOne")
    :next(function(value)
        return CrashFunc()
    end):next(function(value)
        print(value)
    end,function(err)
        print(err) -- 因为使用了pcall所以崩溃了也会返回字符串的崩溃信息
    end)
end



function StepOne(value)
    local p = Promise.new()
    local v = value.." Done\n"
    print(v)
    p:resolve(v)
    return p
end

function StepTwo(value)
    local p = Promise.new()
    local v = value.." StepTwo Done\n"
    print(v)
    p:resolve(v)
    -- p:reject("error")
    return p
end

function StepThree(value)
    local p = Promise.new()
    local v = value.." StepThree Done\n"
    print(v)
    p:resolve(v)
    return p
end

function CrashFunc()
    local p = Promise.new()
    local n = nil
    p:resolve(n.Some())
    return p
end
